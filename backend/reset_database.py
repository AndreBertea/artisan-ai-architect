#!/usr/bin/env python3
"""
Script pour r√©initialiser la base de donn√©es avec les nouveaux enums
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import engine, create_tables
from app.models.intervention import Intervention
from app.models.artisan import Artisan
from app.models.agency import Agency
from app.models.common import Comment, Document
import pandas as pd
from datetime import datetime
import random

def reset_database():
    """R√©initialiser compl√®tement la base de donn√©es"""
    print("üîÑ R√©initialisation de la base de donn√©es...")
    
    # Supprimer toutes les tables
    from sqlalchemy import text
    
    with engine.connect() as conn:
        # D√©sactiver les contraintes de cl√©s √©trang√®res
        conn.execute(text("PRAGMA foreign_keys=OFF"))
        
        # Supprimer toutes les tables
        tables = ['interventions', 'artisans', 'agencies', 'comments', 'documents']
        for table in tables:
            try:
                conn.execute(text(f"DROP TABLE IF EXISTS {table}"))
                print(f"  ‚úÖ Table {table} supprim√©e")
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Erreur lors de la suppression de {table}: {e}")
        
        # R√©activer les contraintes
        conn.execute(text("PRAGMA foreign_keys=ON"))
        conn.commit()
    
    print("‚úÖ Base de donn√©es r√©initialis√©e")

def reimport_csv_data():
    """R√©importer les donn√©es CSV avec les nouveaux enums"""
    print("üîÑ R√©import des donn√©es CSV...")
    
    # Chemin vers le fichier CSV
    csv_path = "../sample/interventionGMBS_SUIVIINTERGMBS_2025.csv"
    
    if not os.path.exists(csv_path):
        print(f"‚ùå Fichier CSV non trouv√©: {csv_path}")
        return
    
    # Lire le CSV
    df = pd.read_csv(csv_path)
    print(f"üìä {len(df)} interventions trouv√©es dans le CSV")
    
    # Cr√©er les tables
    create_tables()
    
    # Importer les donn√©es
    from app.database import SessionLocal
    db = SessionLocal()
    
    try:
        # Extraire les agences uniques de la colonne Agence
        unique_agencies = df['Agence'].dropna().unique()
        print(f"üè¢ {len(unique_agencies)} agences uniques trouv√©es dans le CSV")
        
        # Cr√©er les agences √† partir des donn√©es CSV
        agencies = {}
        
        for agency_name in unique_agencies:
            if pd.isna(agency_name) or agency_name == '':
                continue
                
            agency = Agency(
                name=str(agency_name).strip(),
                address='Paris',
                phone='',
                email='',
                manager='',
                status='actif',
                notes=f'Agence extraite du CSV'
            )
            
            db.add(agency)
            db.flush()  # Pour obtenir l'ID
            
            agencies[agency_name] = agency
            print(f"  ‚úÖ Agence cr√©√©e: {agency.name}")
        
        db.commit()
        print(f"‚úÖ {len(agencies)} agences cr√©√©es √† partir du CSV")
        
        # Extraire les artisans uniques de la colonne SST
        unique_artisans = df['SST'].dropna().unique()
        print(f"üìã {len(unique_artisans)} artisans uniques trouv√©s dans le CSV")
        
        # Cr√©er les artisans √† partir des donn√©es CSV
        artisans = {}
        artisan_id_map = {}  # Pour mapper les noms vers les IDs
        
        for i, artisan_name in enumerate(unique_artisans):
            if pd.isna(artisan_name) or artisan_name == '':
                continue
                
            # D√©terminer la sp√©cialit√© bas√©e sur le m√©tier
            metier_counts = df[df['SST'] == artisan_name]['M√©tier'].value_counts()
            if not metier_counts.empty:
                speciality = metier_counts.index[0]  # M√©tier le plus fr√©quent
            else:
                speciality = 'Bricolage'  # Par d√©faut
            
            # Cr√©er l'artisan
            artisan = Artisan(
                name=str(artisan_name).strip(),
                speciality=str(speciality).strip(),
                status='actif',
                dossier_status='en_cours',
                phone='',
                email='',
                address='Paris',
                notes=f'Artisan extrait du CSV - M√©tier principal: {speciality}'
            )
            
            db.add(artisan)
            db.flush()  # Pour obtenir l'ID
            
            artisans[artisan.id] = artisan
            artisan_id_map[artisan_name] = artisan.id
            
            print(f"  ‚úÖ Artisan cr√©√©: {artisan.name} ({artisan.speciality})")
        
        db.commit()
        print(f"‚úÖ {len(artisans)} artisans cr√©√©s √† partir du CSV")
        
        for artisan in artisans.values():
            db.add(artisan)
        db.commit()
        
        # Importer les interventions
        interventions_created = 0
        
        for index, row in df.iterrows():
            try:
                # D√©terminer le statut avec une distribution r√©aliste
                status_choice = random.random()
                if status_choice < 0.3:
                    status = "demande"
                elif status_choice < 0.5:
                    status = "devis_envoye"
                elif status_choice < 0.7:
                    status = "accepte"
                elif status_choice < 0.85:
                    status = "en_cours"
                elif status_choice < 0.95:
                    status = "terminee"
                else:
                    status = random.choice(["annulee", "visite_technique", "refuse", "stand_by", "sav", "bloque"])
                
                # D√©terminer l'artisan bas√© sur la colonne SST
                artisan_name = row.get('SST', '')
                artisan_id = None
                
                if artisan_name and str(artisan_name).strip() in artisan_id_map:
                    artisan_id = artisan_id_map[str(artisan_name).strip()]
                elif artisans:  # Fallback si l'artisan n'existe pas
                    artisan_id = random.choice(list(artisans.keys()))
                
                # D√©terminer l'agence bas√© sur la colonne Agence
                agency_name = row.get('Agence', 'ImoDirect')
                agency_id = None
                
                if agency_name in agencies:
                    agency_id = agencies[agency_name].id
                else:
                    agency_id = list(agencies.values())[0].id  # Fallback
                
                # Cr√©er l'intervention
                intervention = Intervention(
                    address=str(row.get('Adresse d\'intervention', 'Adresse inconnue')),
                    context=str(row.get('Contexte d\'intervention', 'Intervention')),
                    status=status,
                    created_date=datetime.now(),
                    intervention_date=datetime.now(),
                    # Mapping exact des co√ªts du CSV vers l'interface
                    sst_cost=float(str(row.get('COUT SST', '0')).replace(',', '.')) if row.get('COUT SST') and str(row.get('COUT SST')).strip() != '' else 0.0,
                    material_cost=float(str(row.get('CO√õT MATERIEL', '0')).replace(',', '.')) if row.get('CO√õT MATERIEL') and str(row.get('CO√õT MATERIEL')).strip() != '' else 0.0,
                    intervention_cost=float(str(row.get('COUT INTER', '0')).replace(',', '.')) if row.get('COUT INTER') and str(row.get('COUT INTER')).strip() != '' else 0.0,
                    tenant_name=str(row.get('Locataire', 'Client')),
                    tenant_phone=str(row.get('TEL LOC', '')),
                    tenant_email=str(row.get('Em@il Locataire', '')),
                    manager=str(row.get('Agence', 'ImoDirect')),
                    notes=str(row.get('COMMENTAIRE', '')),
                    priority="normale",
                    tags="",
                    artisan_id=artisan_id,
                    agency_id=agency_id
                )
                
                db.add(intervention)
                interventions_created += 1
                
                if interventions_created % 1000 == 0:
                    print(f"  üìù {interventions_created} interventions cr√©√©es...")
                    db.commit()
                    
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Erreur ligne {index}: {e}")
                continue
        
        db.commit()
        print(f"‚úÖ {interventions_created} interventions import√©es avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'import: {e}")
        db.rollback()
    finally:
        db.close()

def main():
    """Fonction principale"""
    print("üöÄ R√©initialisation compl√®te de la base de donn√©es")
    print("=" * 60)
    
    # R√©initialiser la base
    reset_database()
    
    # R√©importer les donn√©es
    reimport_csv_data()
    
    print("\n" + "=" * 60)
    print("üéâ R√©initialisation termin√©e avec succ√®s !")
    
    # Afficher les statistiques
    from app.database import SessionLocal
    db = SessionLocal()
    try:
        # V√©rifier si les tables existent
        from sqlalchemy import text
        try:
            intervention_count = db.query(Intervention).count()
            artisan_count = db.query(Artisan).count()
            agency_count = db.query(Agency).count()
            
            print(f"\nüìä Statistiques finales :")
            print(f"  - Interventions: {intervention_count}")
            print(f"  - Artisans: {artisan_count}")
            print(f"  - Agences: {agency_count}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  Impossible de r√©cup√©rer les statistiques: {e}")
        
    finally:
        db.close()

if __name__ == "__main__":
    main()
